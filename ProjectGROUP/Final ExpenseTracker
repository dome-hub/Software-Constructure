package Test;

import java.awt.*;
import java.io.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.ImageObserver;
import java.awt.image.ImageProducer;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;

import javax.swing.table.DefaultTableModel;
import javax.swing.*;

import org.apache.logging.log4j.core.config.json.JsonConfiguration;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.*;

import org.jfree.chart.*;
import org.jfree.chart.plot.*;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.*;

public class ExpenseTracker extends JFrame {
	// private JLabel balanceLabel; // label แสดงเงินคงเหลือ
	private JButton addButton, deleteButton, exportButton, importData;
	private JButton showMonthlyChartButton;
	private JTextField amountField, noteField;
	private JRadioButton incomeRadio, expenseRadio;
	private JComboBox<String> monthComboBox;
	private JComboBox<String> dateComboBox;
	private DefaultTableModel tableModel;
	private JTable transactionTable;
	private JLabel totalIncomeLabel, totalExpenseLabel, balanceLabel;

	private double balance = 0.0;

	public ExpenseTracker() {
		setTitle("Expense Tracker");
		setSize(600, 400);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		
		// Set window icon
		ImageIcon icon = new ImageIcon("Icon.png");
		setIconImage(icon.getImage());
		//setIconImage(new ImageIcon("ExpenseIcon.png").getImage());
		
		setLayout(new BorderLayout());
		JPanel inputPanel = new JPanel(new GridLayout(3, 3, 5, 5));

		String[] months = { "January", "February", "March", "April", "May", "June", "July", "August", "September",
				"October", "November", "December" };
		String[] date = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17",
				"18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" };
		monthComboBox = new JComboBox<String>(months);
		dateComboBox = new JComboBox<String>(date);

		// radio
		incomeRadio = new JRadioButton("Income");
		expenseRadio = new JRadioButton("Expense");
		ButtonGroup g = new ButtonGroup();
		g.add(incomeRadio);
		g.add(expenseRadio);
		expenseRadio.setSelected(true);

		addButton = new JButton("Add");
		deleteButton = new JButton("Delete");

		amountField = new JTextField();
		amountField.setFont(new Font("Tahoma", Font.PLAIN, 15)); // set font
		noteField = new JTextField();
		noteField.setFont(new Font("Tahoma", Font.PLAIN, 15)); // set font

		String[] columnNames = { "Date", "Month", "Type", "Money", "Note" };
		tableModel = new DefaultTableModel(columnNames, 0); // 0 คือตัวเลขที่ระบุจำนวนแถวเริ่มต้น
		transactionTable = new JTable(tableModel);
		JScrollPane table = new JScrollPane(transactionTable);
		transactionTable.setFont(new Font("Tahoma", Font.PLAIN, 14));
		// JPanel table = new JPanel(transactionTable); // Why

		JPanel summaryPanel = new JPanel(new GridLayout(3, 2, 3, 5));
		balanceLabel = new JLabel("Total Amount : ");
		totalIncomeLabel = new JLabel("Total Income : ");
		totalExpenseLabel = new JLabel("Total Expense");
		exportButton = new JButton("Export to excel");
		importData = new JButton("Import data");
		showMonthlyChartButton = new JButton("Show Month Chart");

		summaryPanel.add(balanceLabel);
		summaryPanel.add(exportButton);
		summaryPanel.add(totalIncomeLabel);
		summaryPanel.add(importData);
		summaryPanel.add(totalExpenseLabel);
		summaryPanel.add(showMonthlyChartButton);

		inputPanel.add(new JLabel("Month:"));
		inputPanel.add(monthComboBox);
		inputPanel.add(new JLabel("Date"));
		inputPanel.add(dateComboBox);
		inputPanel.add(new JLabel("Amount :"));
		inputPanel.add(amountField);
		inputPanel.add(new JLabel("Note"));
		inputPanel.add(noteField);
		inputPanel.add(incomeRadio);
		inputPanel.add(expenseRadio);
		inputPanel.add(addButton);
		inputPanel.add(deleteButton);

		add(inputPanel, BorderLayout.NORTH);
		add(table, BorderLayout.CENTER);
		add(summaryPanel, BorderLayout.SOUTH);

		deleteButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				deleteTransaction();
			}
		});
		addButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				addTransaction();
			}
		});
		exportButton.addActionListener(e -> exportToExcel());
		importData.addActionListener(e -> importDataTotable());
		showMonthlyChartButton.addActionListener(e -> showMonthlyChart());
	}

	public void addTransaction() {
		double money;
		String date = (String) dateComboBox.getSelectedItem();
		String month = (String) monthComboBox.getSelectedItem();
		String type = expenseRadio.isSelected() ? "Expense" : "Income";
		// Checks if the text consists of digits only and not 0
		if (amountField.getText().matches("\\d+(\\.\\d+)?") && Double.parseDouble(amountField.getText()) != 0)
			money = Double.parseDouble(amountField.getText());
		else {
			JOptionPane.showMessageDialog(this, "Digit Only , Can't input 0");
			return;
		}
		String note = noteField.getText();
		tableModel.addRow(new Object[] { date, month, type, money, note });
		updateSummary();
	}

	public void deleteTransaction() {
		int selectedIndex = transactionTable.getSelectedRow();
		if (selectedIndex != -1) {// ตรวจสอบว่ามีแถวที่ถูกเลือกหรือไม่
			tableModel.removeRow(selectedIndex);
			updateSummary();
		} else
			JOptionPane.showMessageDialog(this, "Select transaction first !!", "No Selection",
					JOptionPane.WARNING_MESSAGE);
	}

	public void exportToExcel() {
		Workbook workbook;
		Sheet sheet;
		int lastRowNum;
		try {
			FileInputStream fis = new FileInputStream("ExpenseTracker22.xlsx");// เช็คชื่อไฟล์นี้ ถ้ามีจะเขียนต่อ
			workbook = new XSSFWorkbook(fis);
			sheet = workbook.getSheetAt(0);
			lastRowNum = sheet.getLastRowNum();// ดึงค่า หมายเลขของแถวสุดท้าย
			fis.close();
		} catch (IOException e) {
			workbook = new XSSFWorkbook();
			sheet = workbook.createSheet("Expense Tracker2");
			lastRowNum = 0;
			Row headerRow = sheet.createRow(0);
			for (int i = 0; i < tableModel.getColumnCount(); i++) {
				Cell cell = headerRow.createCell(i);
				cell.setCellValue(tableModel.getColumnName(i));
			}
		}

		// เพิ่มข้อมูลจาก JTable ลงใน Excel
		for (int i = 0; i < tableModel.getRowCount(); i++) {
			Row row = sheet.createRow(lastRowNum + i + 1);// สร้างแถวใหม่ในชีท Excelโดยต่อจากแถวเก่าสุดท้าย
			for (int j = 0; j < tableModel.getColumnCount(); j++) {
				Cell cell = row.createCell(j);
				cell.setCellValue(tableModel.getValueAt(i, j).toString());
			}
		}

		// Save file
		try {
			FileOutputStream outputStream = new FileOutputStream("ExpenseTracker22.xlsx");
			workbook.write(outputStream);
			JOptionPane.showMessageDialog(this, "Data Exported to Excel");
		} catch (IOException e) {
			JOptionPane.showMessageDialog(this, "Error exporting data: ");
		}
		// clear Jtable
		tableModel.setRowCount(0);
		updateSummary();
	}

	// PLAM
	// ฟังก์ชันช่วยสำหรับแปลงชื่อเดือนเป็นตัวเลข (index)
	private int getMonthIndex(String month) {
		String[] months = { "January", "February", "March", "April", "May", "June", "July", "August", "September",
				"October", "November", "December" };
		for (int i = 0; i < months.length; i++) {
			if (months[i].equalsIgnoreCase(month)) {
				return i + 1; // ดัชนีเริ่มต้นที่ 1 (January = 1)
			}
		}
		return -1; // ถ้าไม่เจอเดือนที่ตรงกัน
	}

	public void importDataTotable() {
		// อ่านไฟล์
		try (FileInputStream fis = new FileInputStream("ExpenseTracker22.xlsx");
				Workbook workbook = new XSSFWorkbook(fis)) {

			Sheet sheet = workbook.getSheetAt(0);
			// clear table
			tableModel.setRowCount(0);

			ArrayList<Vector<Object>> data = new ArrayList<>();

			for (int i = 1; i <= sheet.getLastRowNum(); i++) {
				Row row = sheet.getRow(i);
				Vector<Object> rowData = new Vector<>();

				// Date
				rowData.add(row.getCell(0).getStringCellValue());

				// Month
				rowData.add(row.getCell(1).getStringCellValue());

				// Type
				rowData.add(row.getCell(2).getStringCellValue());

				// Money - เป็น Double
				Cell moneyCell = row.getCell(3);
				if (moneyCell.getCellType() == CellType.NUMERIC) {
					rowData.add(moneyCell.getNumericCellValue());
				} else {
					rowData.add(Double.parseDouble(moneyCell.getStringCellValue()));
				}

				// Note
				rowData.add(row.getCell(4).getStringCellValue());

				data.add(rowData);
			}

			// เรียงข้อมูลตามเดือนและวันที่
			Collections.sort(data, new Comparator<Vector<Object>>() {
				@Override
				public int compare(Vector<Object> o1, Vector<Object> o2) {
					int monthComparison = Integer.compare(getMonthIndex((String) o1.get(1)),
							getMonthIndex((String) o2.get(1)));
					if (monthComparison != 0) {
						return monthComparison;
					}
					int day1 = Integer.parseInt((String) o1.get(0));
					int day2 = Integer.parseInt((String) o2.get(0));
					return Integer.compare(day1, day2);
				}
			});

			// เพิ่มข้อมูลลง JTable หลังจากเรียงข้อมูลเสร็จ
			for (Vector<Object> rowData : data) {
				tableModel.addRow(rowData);
			}

			// อัปเดตสรุปและ UI
			// SwingUtilities.invokeLater(() -> {
			updateSummary();
			// repaint(); // เพิ่มการ repaint เพื่อให้แน่ใจว่า UI จะอัปเดต
			// });
			
			
//			// ล้างข้อมูลในไฟล์ Sheetทุกแถวทีละแถวตั้งแต่แถวสุดท้าย >=1เพื่อป้องกันการลบแถวบนสุด(Excel)
			for (int i = sheet.getLastRowNum(); i >= 1; i--) {
				Row row = sheet.getRow(i);
				if (row != null) {
					sheet.removeRow(row);
				}
			}//เขียนข้อมูลเปล่าๆทับไปในExcel
			try (FileOutputStream fos = new FileOutputStream("ExpenseTracker22.xlsx")) {
			    workbook.write(fos);
			}

			JOptionPane.showMessageDialog(this, "Data Imported, Sorted,Summary Updated and Clear Successfully!");
		} catch (IOException e) {
			JOptionPane.showMessageDialog(this, "Error importing data: ");
		}

	}

	// Chart MOnth
		private void showMonthlyChart() {
			
			try {
				FileInputStream fis = new FileInputStream("ExpenseTracker22.xlsx"); // อ่านไฟล์ ชื่อExpenseTracker.xlsx
				Workbook workbook = new XSSFWorkbook(fis);// Workbook เป็นอ็อบเจ็กต์ที่ใช้จัดการกับไฟล์ Excel โดยใช้
															// XSSFWorkbook
				Sheet sheet = workbook.getSheetAt(0);// เลือกแผ่นงานแรก (sheet) จากไฟล์ Excel

				DefaultCategoryDataset dataset = new DefaultCategoryDataset();// ใช้เก็บข้อมูลที่จะแสดงในกราฟ
//			        Map<String, Double> incomeByMonth = new HashMap<>();
//			        Map<String, Double> expenseByMonth = new HashMap<>();
				Map<String, Double> incomeByMonth = new TreeMap<>(new MonthComparator());// เก็บข้อมูลแบบเรียง
				Map<String, Double> expenseByMonth = new TreeMap<>(new MonthComparator());// เก็บข้อมูลแบบเรียง
				
//				String[] allMonths = { "January", "February", "March", "April", "May", "June", "July", "August",
//						"September", "October", "November", "December" };
				for (String month : MonthComparator.months) {
					incomeByMonth.put(month, 0.0);
					expenseByMonth.put(month, 0.0);
				}
				
				for (Row row : sheet) {// วนลูปอ่านข้อมูลแต่ละแถว
					if (row.getRowNum() == 0)
						continue; // Skip header
					Cell monthCell = row.getCell(1);
					Cell typeCell = row.getCell(2);
					Cell amountCell = row.getCell(3);

					if (monthCell == null || typeCell == null || amountCell == null)
						continue;

					String month = monthCell.getStringCellValue();
					String type = typeCell.getStringCellValue();
					double amount;

					if (amountCell.getCellType() == CellType.NUMERIC) {
						amount = amountCell.getNumericCellValue();
					} else if (amountCell.getCellType() == CellType.STRING) {
						try {
							amount = Double.parseDouble(amountCell.getStringCellValue());
						} catch (NumberFormatException e) {
							System.out.println(
									"Invalid amount in row " + row.getRowNum() + ": " + amountCell.getStringCellValue());
							continue;
						}
					} else {
						System.out.println("Unexpected cell type in row " + row.getRowNum());
						continue;
					}

					if (type.equals("Income")) {
						incomeByMonth.put(month, incomeByMonth.getOrDefault(month, 0.0) + amount);
					} else if (type.equals("Expense")) {
						expenseByMonth.put(month, expenseByMonth.getOrDefault(month, 0.0) + amount);
					}
				}
				
				// Add data to dataset for all months
				for (String month : incomeByMonth.keySet()) {
					dataset.addValue(incomeByMonth.get(month), "รายรับ", month);
					dataset.addValue(expenseByMonth.getOrDefault(month, 0.0), "รายจ่าย", month);
				}

				JFreeChart chart = ChartFactory.createBarChart("สรุปรายรับ-จ่าย 12 เดือน", "เดือน", "จำนวนเงิน", dataset,
						PlotOrientation.VERTICAL, true, true, false);

				CategoryPlot plot = (CategoryPlot) chart.getPlot();
				BarRenderer renderer = (BarRenderer) plot.getRenderer();
				renderer.setSeriesPaint(0, Color.GREEN);
				renderer.setSeriesPaint(1, Color.RED);

				ChartFrame frame = new ChartFrame("Monthly Income and Expense Chart", chart);
				//Icon
				frame.setIconImage(getIconImage());
				frame.pack();
				frame.setVisible(true);

				workbook.close();
				fis.close();
			} catch (IOException ex) {
				ex.printStackTrace();
				JOptionPane.showMessageDialog(this, "Error reading Excel file: " + ex.getMessage());
			}
		}

		//เปลี่ยนเป็น static เพื่อให้ Showgraph ใช้งาน months ได้
		private static class MonthComparator implements Comparator<String> {
			private static final String[] months = { "January", "February", "March", "April", "May", "June", "July", "August",
					"September", "October", "November", "December" };
			private final Map<String, Integer> monthOrder = new HashMap<>();

			public MonthComparator() {
				for (int i = 0; i < months.length; i++) {
					monthOrder.put(months[i], i);
				}
			}

			@Override
			public int compare(String m1, String m2) {
				return Integer.compare(monthOrder.getOrDefault(m1, 12), monthOrder.getOrDefault(m2, 12));
			}
		}


	public void updateSummary() {
		double totalIncome = 0;
		double totalExpense = 0;
		for (int i = 0; i < tableModel.getRowCount(); i++) {
			String type = (String) tableModel.getValueAt(i, 2);
			double amount = (double) tableModel.getValueAt(i, 3);

			if (type.equals("Income")) {
				totalIncome += amount;
			} else
				totalExpense += amount;

		}
		double balance = totalIncome - totalExpense;
		balanceLabel.setText("Total Amount : " + balance);
		totalExpenseLabel.setText("Total Expense : " + totalExpense);
		totalIncomeLabel.setText("Total Income : " + totalIncome);
	}

	public static void main(String[] args) {
		try {
			// UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
			 UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");

		} catch (Exception e) {
			e.printStackTrace();
		}

		new ExpenseTracker().setVisible(true);
	}
}
