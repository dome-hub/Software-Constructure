package ProjectMoney;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.table.DefaultTableModel;
import javax.swing.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.*;

import org.jfree.chart.*;
import org.jfree.chart.plot.*;
import org.jfree.data.category.*;

public class ExpenseTracker extends JFrame {
	// private JLabel balanceLabel; // label แสดงเงินคงเหลือ
	private JButton addButton, deleteButton, exportButton, showChartsButton;
	private JTextField amountField, noteField;
	private JRadioButton incomeRadio, expenseRadio;
	private JComboBox<String> monthComboBox;
	private JComboBox<String> dateComboBox;
	private DefaultTableModel tableModel;
	private JTable transactionTable;
	private JLabel totalIncomeLabel, totalExpenseLabel, balanceLabel;

	private double balance = 0.0;

	public ExpenseTracker() {
		setTitle("Expense Tracker");
		setSize(600, 400);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setLayout(new BorderLayout());
		JFrame f = new JFrame();
		JPanel inputPanel = new JPanel(new GridLayout(3, 3, 5, 5));
		// inputPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

		String[] months = { "January", "February", "March", "April", "May", "June", "July", "August", "September",
				"October", "November", "December" };
		String[] date = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17",
				"18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" };

		exportButton = new JButton("Export to Excel");
		exportButton.addActionListener(e -> exportToExcel());

		showChartsButton = new JButton("Show Charts");
		showChartsButton.addActionListener(e -> showCharts());
		
		monthComboBox = new JComboBox<>(months);
		dateComboBox = new JComboBox<>(date);

		incomeRadio = new JRadioButton("Income");
		expenseRadio = new JRadioButton("Expense");
		ButtonGroup transactionTypeGroup = new ButtonGroup();
		transactionTypeGroup.add(incomeRadio);
		transactionTypeGroup.add(expenseRadio);
		incomeRadio.setSelected(true);

		amountField = new JTextField();
		noteField = new JTextField();

		inputPanel.add(new JLabel("Month:"));
		inputPanel.add(monthComboBox);
		inputPanel.add(new JLabel("Date:"));
		inputPanel.add(dateComboBox);
		inputPanel.add(new JLabel("Amount:"));
		inputPanel.add(amountField);
		inputPanel.add(new JLabel("Note:"));
		inputPanel.add(noteField);
		inputPanel.add(incomeRadio);
		inputPanel.add(expenseRadio);

		addButton = new JButton("Add");
		deleteButton = new JButton("Delete");
		inputPanel.add(addButton);
		inputPanel.add(deleteButton);

		// addbutton
		addButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				addTransaction(); // ไปทำงานเพิ่มลงในตาราง
			}
		});
		// deleteButton
		deleteButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				deleteTransaction();
			}
		});

		// column แสดงตาราง
		String[] columnNames = { "date", "Month", "type", "Money", "Note" };
		tableModel = new DefaultTableModel(columnNames, 0);
		transactionTable = new JTable(tableModel);
		JScrollPane tableScrollPane = new JScrollPane(transactionTable);

		// อยู่ล่างสุดแสดง Total ยอดเงินคงเหลือ
		JPanel summaryPanel = new JPanel(new GridLayout(3,2,3,5));
		balanceLabel = new JLabel("Total Amount : ");
		totalIncomeLabel = new JLabel("Total Income : ");
		totalExpenseLabel = new JLabel("Total Expense :");
		summaryPanel.add(balanceLabel);
		summaryPanel.add(exportButton);
		summaryPanel.add(totalIncomeLabel);
		summaryPanel.add(showChartsButton);
		summaryPanel.add(totalExpenseLabel);
		
		

		add(inputPanel, BorderLayout.NORTH);
//        add(addButton, BorderLayout.CENTER);
		add(tableScrollPane, BorderLayout.CENTER);
		add(summaryPanel, BorderLayout.SOUTH);

	}

	public void addTransaction() {
		try {
			String date = (String) dateComboBox.getSelectedItem();
			String month = (String) monthComboBox.getSelectedItem();
			double amount = Double.parseDouble(amountField.getText());
			String note = noteField.getText();
			String type = incomeRadio.isSelected() ? "Income" : "Expense"; // เช็คว่ากดปุ่มไหน

			tableModel.addRow(new Object[] { date, month, type, amount, note });

			updateSummary(); // ไป Update เงินคงเหลือ
		} catch (Exception e) {
			System.out.println(e);
		}
	}

	public void deleteTransaction() {
		int selectedIndex = transactionTable.getSelectedRow(); // ดึงแถวที่ถูกเลือกในตาราง

		if (selectedIndex != -1) { // ตรวจสอบว่ามีแถวที่ถูกเลือกหรือไม่
			tableModel.removeRow(selectedIndex); // ลบแถวที่ถูกเลือกจาก tableModel
			updateSummary(); // อัพเดตยอดเงินคงเหลือ
		} else {
			// System.out.println(e);
			JOptionPane.showMessageDialog(this, "Please select a transaction to delete.", "No Selection",
					JOptionPane.WARNING_MESSAGE);
		}
	}

	public void updateSummary() {
		// double balance=0;
		double totalIncome = 0;
		double totalExpense = 0;

		for (int i = 0; i < tableModel.getRowCount(); i++) {
			String type = (String) tableModel.getValueAt(i, 2);
			double amount = (double) tableModel.getValueAt(i, 3);

			if (type.equals("Income")) {
				totalIncome += amount;
			} else if (type.equals("Expense")) {
				totalExpense += amount;
			}
		}
		double balance = totalIncome - totalExpense;
		balanceLabel.setText("Total Amount : " + balance);
		totalIncomeLabel.setText("Total Income: " + totalIncome);
		totalExpenseLabel.setText("Total Expense: " + totalExpense);
	}

	//เอาข้อมูลที่กรอกเข้า Excel 
	private void exportToExcel() {
		try {
			Workbook workbook = new XSSFWorkbook();
			Sheet sheet = workbook.createSheet("Expense Tracker");

			// สร้างส่วนหัวของตาราง
			Row headerRow = sheet.createRow(0);
			for (int i = 0; i < tableModel.getColumnCount(); i++) {
				Cell cell = headerRow.createCell(i);
				cell.setCellValue(tableModel.getColumnName(i));
			}

			// เพิ่มข้อมูลจากตารางลงใน Excel
			for (int i = 0; i < tableModel.getRowCount(); i++) {
				Row row = sheet.createRow(i + 1);
				for (int j = 0; j < tableModel.getColumnCount(); j++) {
					Cell cell = row.createCell(j);
					cell.setCellValue(tableModel.getValueAt(i, j).toString());
				}
			}

			// บันทึกไฟล์ Excel
			try (FileOutputStream outputStream = new FileOutputStream("ExpenseTracker.xlsx")) {
				workbook.write(outputStream);
			}
			JOptionPane.showMessageDialog(this, "Data exported to ExpenseTracker.xlsx");
		} catch (IOException ex) {
			ex.printStackTrace();
			JOptionPane.showMessageDialog(this, "Error exporting data: " + ex.getMessage());
		}
	}
	
	
	/*private void showCharts() {
        // สร้างข้อมูลสำหรับแผนภูมิรายเดือน
        DefaultCategoryDataset monthlyDataset = new DefaultCategoryDataset();
        Map<String, Double> monthlyExpenses = new HashMap<>();
        Map<String, Double> monthlyIncomes = new HashMap<>();

        for (int i = 0; i < tableModel.getRowCount(); i++) {
            String month = tableModel.getValueAt(i, 1).toString();
            double amount = Double.parseDouble(tableModel.getValueAt(i, 3).toString());
            String type = tableModel.getValueAt(i, 2).toString();

            if (type.equals("Expense")) {
                monthlyExpenses.put(month, monthlyExpenses.getOrDefault(month, 0.0) + amount);
            } else {
                monthlyIncomes.put(month, monthlyIncomes.getOrDefault(month, 0.0) + amount);
            }
        }

        for (String month : monthlyExpenses.keySet()) {
            monthlyDataset.addValue(monthlyExpenses.get(month), "Expenses", month);
            monthlyDataset.addValue(monthlyIncomes.getOrDefault(month, 0.0), "Incomes", month);
        }

        // สร้างแผนภูมิรายเดือน
        JFreeChart monthlyChart = ChartFactory.createBarChart(
                "Monthly Expenses and Incomes",
                "Month",
                "Amount",
                monthlyDataset,
                PlotOrientation.VERTICAL,
                true,
                true,
                false
        );

        // สร้างข้อมูลสำหรับแผนภูมิรายวัน
        DefaultCategoryDataset dailyDataset = new DefaultCategoryDataset();
        Map<String, Double> dailyExpenses = new HashMap<>();
        Map<String, Double> dailyIncomes = new HashMap<>();

        for (int i = 0; i < tableModel.getRowCount(); i++) {
            String date = tableModel.getValueAt(i, 0).toString() + "/" + tableModel.getValueAt(i, 1).toString();
            double amount = Double.parseDouble(tableModel.getValueAt(i, 3).toString());
            String type = tableModel.getValueAt(i, 2).toString();

            if (type.equals("Expense")) {
                dailyExpenses.put(date, dailyExpenses.getOrDefault(date, 0.0) + amount);
            } else {
                dailyIncomes.put(date, dailyIncomes.getOrDefault(date, 0.0) + amount);
            }
        }

        for (String date : dailyExpenses.keySet()) {
            dailyDataset.addValue(dailyExpenses.get(date), "Expenses", date);
            dailyDataset.addValue(dailyIncomes.getOrDefault(date, 0.0), "Incomes", date);
        }

        // สร้างแผนภูมิรายวัน
        JFreeChart dailyChart = ChartFactory.createBarChart(
                "Daily Expenses and Incomes",
                "Date",
                "Amount",
                dailyDataset,
                PlotOrientation.VERTICAL,
                true,
                true,
                false
        );

        // แสดงแผนภูมิในหน้าต่างใหม่
        JFrame chartsFrame = new JFrame("Expense Charts");
        chartsFrame.setLayout(new GridLayout(2, 1));
        chartsFrame.add(new ChartPanel(monthlyChart));
        chartsFrame.add(new ChartPanel(dailyChart));
        chartsFrame.pack();
        chartsFrame.setVisible(true);
    }
	*/

	public static void main(String[] args) {
		new ExpenseTracker().setVisible(true);
	}
}
