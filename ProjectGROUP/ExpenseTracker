package ProjectMoney;

import java.awt.*;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.*;

import org.jfree.chart.*;
import org.jfree.chart.plot.*;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.*;

public class ExpenseTracker extends JFrame {
	// private JLabel balanceLabel; // label แสดงเงินคงเหลือ
	private JButton addButton, deleteButton, exportButton, deleteFromExcelButton;
	private JButton showMonthlyChartButton, showDailyChartButton;
	private JTextField amountField, noteField;
	private JRadioButton incomeRadio, expenseRadio;
	private JComboBox<String> monthComboBox;
	private JComboBox<String> dateComboBox;
	private DefaultTableModel tableModel;
	private JTable transactionTable;
	private JLabel totalIncomeLabel, totalExpenseLabel, balanceLabel;

	private double balance = 0.0;

	public ExpenseTracker() {
		setTitle("Expense Tracker");
		setSize(600, 400);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setLayout(new BorderLayout());
		JFrame f = new JFrame();
		JPanel inputPanel = new JPanel(new GridLayout(3, 3, 5, 5));
		// inputPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

		String[] months = { "January", "February", "March", "April", "May", "June", "July", "August", "September",
				"October", "November", "December" };
		String[] date = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17",
				"18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" };

		exportButton = new JButton("Export to Excel");
		exportButton.addActionListener(e -> exportToExcel());
		deleteFromExcelButton = new JButton("Delete from Excel");
		deleteFromExcelButton.addActionListener(e -> deleteFromExcel());
		showMonthlyChartButton = new JButton("Show Monthly Chart");
		showDailyChartButton = new JButton("Show Daily Chart");
		
		showMonthlyChartButton.addActionListener(e -> showMonthlyChart());
       // showDailyChartButton.addActionListener(e -> showDailyChart());

		monthComboBox = new JComboBox<>(months);
		dateComboBox = new JComboBox<>(date);

		incomeRadio = new JRadioButton("Income");
		expenseRadio = new JRadioButton("Expense");
		ButtonGroup transactionTypeGroup = new ButtonGroup();
		transactionTypeGroup.add(incomeRadio);
		transactionTypeGroup.add(expenseRadio);
		incomeRadio.setSelected(true);

		amountField = new JTextField();
		noteField = new JTextField();

		inputPanel.add(new JLabel("Month:"));
		inputPanel.add(monthComboBox);
		inputPanel.add(new JLabel("Date:"));
		inputPanel.add(dateComboBox);
		inputPanel.add(new JLabel("Amount:"));
		inputPanel.add(amountField);
		inputPanel.add(new JLabel("Note:"));
		inputPanel.add(noteField);
		inputPanel.add(incomeRadio);
		inputPanel.add(expenseRadio);

		addButton = new JButton("Add");
		deleteButton = new JButton("Delete");
		inputPanel.add(addButton);
		inputPanel.add(deleteButton);

		// addbutton
		addButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				addTransaction(); // ไปทำงานเพิ่มลงในตาราง
			}
		});
		// deleteButton
		deleteButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				deleteTransaction();
			}
		});

		// column แสดงตาราง
		String[] columnNames = { "Date", "Month", "Type", "Money", "Note" };
		tableModel = new DefaultTableModel(columnNames, 0);
		transactionTable = new JTable(tableModel);
		JScrollPane tableScrollPane = new JScrollPane(transactionTable);

		// อยู่ล่างสุดแสดง Total ยอดเงินคงเหลือ
		JPanel summaryPanel = new JPanel(new GridLayout(3, 3, 3, 5));
		balanceLabel = new JLabel("Total Amount : ");
		totalIncomeLabel = new JLabel("Total Income : ");
		totalExpenseLabel = new JLabel("Total Expense :");
		summaryPanel.add(balanceLabel);
		summaryPanel.add(exportButton);
		summaryPanel.add(deleteFromExcelButton);
		summaryPanel.add(totalIncomeLabel);
		summaryPanel.add(showDailyChartButton);
		summaryPanel.add(showMonthlyChartButton);
		summaryPanel.add(totalExpenseLabel);
		

		add(inputPanel, BorderLayout.NORTH);
//        add(addButton, BorderLayout.CENTER);
		add(tableScrollPane, BorderLayout.CENTER);
		add(summaryPanel, BorderLayout.SOUTH);

	}

	public void addTransaction() {
		try {
			String date = (String) dateComboBox.getSelectedItem();
			String month = (String) monthComboBox.getSelectedItem();
			double amount = Double.parseDouble(amountField.getText());
			String note = noteField.getText();
			String type = incomeRadio.isSelected() ? "Income" : "Expense"; // เช็คว่ากดปุ่มไหน

			tableModel.addRow(new Object[] { date, month, type, amount, note });

			updateSummary(); // ไป Update เงินคงเหลือ
		} catch (Exception e) {
			System.out.println(e);
		}
	}

	public void deleteTransaction() {
		int selectedIndex = transactionTable.getSelectedRow(); // ดึงแถวที่ถูกเลือกในตาราง

		if (selectedIndex != -1) { // ตรวจสอบว่ามีแถวที่ถูกเลือกหรือไม่
			tableModel.removeRow(selectedIndex); // ลบแถวที่ถูกเลือกจาก tableModel
			updateSummary(); // อัพเดตยอดเงินคงเหลือ
		} else {
			// System.out.println(e);
			JOptionPane.showMessageDialog(this, "Please select a transaction to delete.", "No Selection",
					JOptionPane.WARNING_MESSAGE);
		}
	}

	public void updateSummary() {
		// double balance=0;
		double totalIncome = 0;
		double totalExpense = 0;

		for (int i = 0; i < tableModel.getRowCount(); i++) {
			String type = (String) tableModel.getValueAt(i, 2);
			double amount = (double) tableModel.getValueAt(i, 3);

			if (type.equals("Income")) {
				totalIncome += amount;
			} else if (type.equals("Expense")) {
				totalExpense += amount;
			}
		}
		double balance = totalIncome - totalExpense;
		balanceLabel.setText("Total Amount : " + balance);
		totalIncomeLabel.setText("Total Income: " + totalIncome);
		totalExpenseLabel.setText("Total Expense: " + totalExpense);
	}

	// เอาข้อมูลที่กรอกเข้า Excel
	private void exportToExcel() {
		try {
			Workbook workbook;
			Sheet sheet;
			int lastRowNum;

			try {
				// Try to open existing file
				FileInputStream fis = new FileInputStream("ExpenseTracker.xlsx");
				workbook = new XSSFWorkbook(fis);
				sheet = workbook.getSheetAt(0);
				lastRowNum = sheet.getLastRowNum();
				fis.close();
			} catch (IOException e) {
				// If file doesn't exist, create new workbook
				workbook = new XSSFWorkbook();
				sheet = workbook.createSheet("Expense Tracker");
				lastRowNum = 0;

				// Create header row for new file
				Row headerRow = sheet.createRow(0);
				for (int i = 0; i < tableModel.getColumnCount(); i++) {
					Cell cell = headerRow.createCell(i);
					cell.setCellValue(tableModel.getColumnName(i));
				}
			}

			// Add new data
			for (int i = 0; i < tableModel.getRowCount(); i++) {
				Row row = sheet.createRow(lastRowNum + i + 1);
				for (int j = 0; j < tableModel.getColumnCount(); j++) {
					Cell cell = row.createCell(j);
					cell.setCellValue(tableModel.getValueAt(i, j).toString());
				}
			}

			// Save the file
			try (FileOutputStream outputStream = new FileOutputStream("ExpenseTracker.xlsx")) {
				workbook.write(outputStream);
			}
			JOptionPane.showMessageDialog(this, "Data exported to ExpenseTracker.xlsx");
		} catch (IOException ex) {
			ex.printStackTrace();
			JOptionPane.showMessageDialog(this, "Error exporting data: " + ex.getMessage());
		}
	}

	
	//ลบข้อมูลใน Excel ระบุแถว
	public void deleteFromExcel() {
		try {
			File file = new File("ExpenseTracker.xlsx");
			if (!file.exists()) {
				JOptionPane.showMessageDialog(this, "Excel file does not exist.", "Error", JOptionPane.ERROR_MESSAGE);
				return;
			}

			FileInputStream fis = new FileInputStream(file);
			Workbook workbook = new XSSFWorkbook(fis);
			Sheet sheet = workbook.getSheetAt(0);

			int rowToDelete = Integer
					.parseInt(JOptionPane.showInputDialog(this, "Enter the row number to delete (1-based):"));
			if (rowToDelete <= 1 || rowToDelete > sheet.getLastRowNum() + 1) {
				JOptionPane.showMessageDialog(this, "Invalid row number.", "Error", JOptionPane.ERROR_MESSAGE);
				//return;
			}

			sheet.removeRow(sheet.getRow(rowToDelete - 1));
			if (rowToDelete < sheet.getLastRowNum()) {
				sheet.shiftRows(rowToDelete, sheet.getLastRowNum(), -1);
			}

			FileOutputStream fos = new FileOutputStream(file);
			workbook.write(fos);
			fos.close();
			workbook.close();

			JOptionPane.showMessageDialog(this, "Row deleted successfully from Excel.");
		} catch (IOException | NumberFormatException ex) {
			ex.printStackTrace();
			JOptionPane.showMessageDialog(this, "Error deleting data: " + ex.getMessage(), "Error",
					JOptionPane.ERROR_MESSAGE);
		}
	}
	
	
	//Chart MOnth
	private void showMonthlyChart() {
	    try {
	        FileInputStream fis = new FileInputStream("ExpenseTracker.xlsx");
	        Workbook workbook = new XSSFWorkbook(fis);
	        Sheet sheet = workbook.getSheetAt(0);

	        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
	        Map<String, Double> incomeByMonth = new HashMap<>();
	        Map<String, Double> expenseByMonth = new HashMap<>();

	        for (Row row : sheet) {
	            if (row.getRowNum() == 0) continue; // Skip header
	            Cell monthCell = row.getCell(1);
	            Cell typeCell = row.getCell(2);
	            Cell amountCell = row.getCell(3);

	            if (monthCell == null || typeCell == null || amountCell == null) continue;

	            String month = monthCell.getStringCellValue();
	            String type = typeCell.getStringCellValue();
	            double amount;

	            if (amountCell.getCellType() == CellType.NUMERIC) {
	                amount = amountCell.getNumericCellValue();
	            } else if (amountCell.getCellType() == CellType.STRING) {
	                try {
	                    amount = Double.parseDouble(amountCell.getStringCellValue());
	                } catch (NumberFormatException e) {
	                    System.out.println("Invalid amount in row " + row.getRowNum() + ": " + amountCell.getStringCellValue());
	                    continue;
	                }
	            } else {
	                System.out.println("Unexpected cell type in row " + row.getRowNum());
	                continue;
	            }

	            if (type.equals("Income")) {
	                incomeByMonth.put(month, incomeByMonth.getOrDefault(month, 0.0) + amount);
	            } else if (type.equals("Expense")) {
	                expenseByMonth.put(month, expenseByMonth.getOrDefault(month, 0.0) + amount);
	            }
	        }

	        for (String month : incomeByMonth.keySet()) {
	            dataset.addValue(incomeByMonth.get(month), "รายรับ", month);
	            dataset.addValue(expenseByMonth.getOrDefault(month, 0.0), "รายจ่าย", month);
	        }

	        JFreeChart chart = ChartFactory.createBarChart(
	            "สรุปรายรับ-จ่าย 6 เดือน",
	            "เดือน",
	            "จำนวนเงิน",
	            dataset,
	            PlotOrientation.VERTICAL,
	            true,
	            true,
	            false
	        );

	        CategoryPlot plot = (CategoryPlot) chart.getPlot();
	        BarRenderer renderer = (BarRenderer) plot.getRenderer();
	        renderer.setSeriesPaint(0, Color.GREEN);
	        renderer.setSeriesPaint(1, Color.ORANGE);

	        ChartFrame frame = new ChartFrame("Monthly Income and Expense Chart", chart);
	        frame.pack();
	        frame.setVisible(true);

	        workbook.close();
	        fis.close();
	    } catch (IOException ex) {
	        ex.printStackTrace();
	        JOptionPane.showMessageDialog(this, "Error reading Excel file: " + ex.getMessage());
	    }
	}

	

	public static void main(String[] args) {
		new ExpenseTracker().setVisible(true);
	}
}
