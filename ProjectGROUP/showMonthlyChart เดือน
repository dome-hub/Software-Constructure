private void showMonthlyChart() {
	    try {
	        FileInputStream fis = new FileInputStream("ExpenseTracker.xlsx");
	        Workbook workbook = new XSSFWorkbook(fis);
	        Sheet sheet = workbook.getSheetAt(0);

	        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
	        Map<String, Double> incomeByMonth = new HashMap<>();
	        Map<String, Double> expenseByMonth = new HashMap<>();

	        for (Row row : sheet) {
	            if (row.getRowNum() == 0) continue; // Skip header
	            Cell monthCell = row.getCell(1);
	            Cell typeCell = row.getCell(2);
	            Cell amountCell = row.getCell(3);

	            if (monthCell == null || typeCell == null || amountCell == null) continue;

	            String month = monthCell.getStringCellValue();
	            String type = typeCell.getStringCellValue();
	            double amount;

	            if (amountCell.getCellType() == CellType.NUMERIC) {
	                amount = amountCell.getNumericCellValue();
	            } else if (amountCell.getCellType() == CellType.STRING) {
	                try {
	                    amount = Double.parseDouble(amountCell.getStringCellValue());
	                } catch (NumberFormatException e) {
	                    System.out.println("Invalid amount in row " + row.getRowNum() + ": " + amountCell.getStringCellValue());
	                    continue;
	                }
	            } else {
	                System.out.println("Unexpected cell type in row " + row.getRowNum());
	                continue;
	            }

	            if (type.equals("Income")) {
	                incomeByMonth.put(month, incomeByMonth.getOrDefault(month, 0.0) + amount);
	            } else if (type.equals("Expense")) {
	                expenseByMonth.put(month, expenseByMonth.getOrDefault(month, 0.0) + amount);
	            }
	        }

	        for (String month : incomeByMonth.keySet()) {
	            dataset.addValue(incomeByMonth.get(month), "รายรับ", month);
	            dataset.addValue(expenseByMonth.getOrDefault(month, 0.0), "รายจ่าย", month);
	        }

	        JFreeChart chart = ChartFactory.createBarChart(
	            "สรุปรายรับ-จ่าย 6 เดือน",
	            "เดือน",
	            "จำนวนเงิน",
	            dataset,
	            PlotOrientation.VERTICAL,
	            true,
	            true,
	            false
	        );

	        CategoryPlot plot = (CategoryPlot) chart.getPlot();
	        BarRenderer renderer = (BarRenderer) plot.getRenderer();
	        renderer.setSeriesPaint(0, Color.GREEN);
	        renderer.setSeriesPaint(1, Color.ORANGE);

	        ChartFrame frame = new ChartFrame("Monthly Income and Expense Chart", chart);
	        frame.pack();
	        frame.setVisible(true);

	        workbook.close();
	        fis.close();
	    } catch (IOException ex) {
	        ex.printStackTrace();
	        JOptionPane.showMessageDialog(this, "Error reading Excel file: " + ex.getMessage());
	    }
	}
